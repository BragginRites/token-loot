name: Auto Release

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Extract Version from module.json
        id: get_version
        run: |
          VERSION=$(jq -r '.version' module.json)
          echo "Found version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          PACKAGE_ID=$(jq -r '.id' module.json)
          MIN_CORE=$(jq -r '.compatibility.minimum' module.json)
          VERIFIED_CORE=$(jq -r '.compatibility.verified' module.json)
          MAX_CORE=$(jq -r '.compatibility.maximum // ""' module.json)
          echo "PACKAGE_ID=$PACKAGE_ID" >> $GITHUB_ENV
          echo "MIN_CORE=$MIN_CORE" >> $GITHUB_ENV
          echo "VERIFIED_CORE=$VERIFIED_CORE" >> $GITHUB_ENV
          echo "MAX_CORE=$MAX_CORE" >> $GITHUB_ENV

      - name: Extract Latest Changelog Entry
        id: get_changelog
        run: |
          if [ -f CHANGELOG.md ]; then
            CHANGELOG=$(awk '
              /^## \[[0-9]+\.[0-9]+\.[0-9]+/ {
                if (p) { exit }
                p=1
                next
              }
              p { print }
            ' CHANGELOG.md | sed '/^[[:space:]]*$/d')
          else
            CHANGELOG=""
          fi
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Create Git Tag
        id: tag
        run: |
          TAG="${{ env.VERSION }}"
          echo "Creating tag: $TAG"
          git tag "$TAG"
          git push origin "$TAG"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Create Module ZIP
        run: |
          zip -r token-loot.zip . \
            -x "*.git*" \
               ".github*" \
               "*.vscode*"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: Release ${{ steps.tag.outputs.tag }}
          body: ${{ env.CHANGELOG }}
          files: |
            token-loot.zip
            module.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to Foundry VTT
        run: |
          MANIFEST_URL="https://github.com/${{ github.repository }}/releases/download/${{ env.VERSION }}/module.json"
          NOTES_URL="https://github.com/${{ github.repository }}/releases/tag/${{ env.VERSION }}"
          payload=$(cat <<EOF
          {
            "id": "${{ env.PACKAGE_ID }}",
            "release": {
              "version": "${{ env.VERSION }}",
              "manifest": "$MANIFEST_URL",
              "notes": "$NOTES_URL",
              "compatibility": {
                "minimum": "${{ env.MIN_CORE }}",
                "verified": "${{ env.VERIFIED_CORE }}",
                "maximum": "${{ env.MAX_CORE }}"
              }
            }
          }
          EOF
          )
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: ${{ secrets.FOUNDRY_API_KEY }}" \
            -d "$payload" \
            https://api.foundryvtt.com/_api/packages/release_version/
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


